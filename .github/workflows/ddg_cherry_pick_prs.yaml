name: DDG cherry-pick PRs

on:
  pull_request:
    types: [closed]
    branches:
      - master


jobs:
  setup:
    # Only run if the PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.get-branches.outputs.branches }}

    steps:
      - name: Get release branches
        id: get-branches
        run: |
          # Get the RELEASE_BRANCHES variable and convert to JSON array
          BRANCHES="${{ vars.RELEASE_BRANCHES }}"

          if [ -z "$BRANCHES" ]; then
            echo "No release branches configured in RELEASE_BRANCHES variable"
            echo "branches=[]" >> $GITHUB_OUTPUT
          else
            # Convert space-separated list to JSON array (compact format)
            JSON_ARRAY=$(echo "$BRANCHES" | tr ' ' '\n' | jq -R . | jq -s . | jq -c .)
            echo "branches=${JSON_ARRAY}" >> $GITHUB_OUTPUT
            echo "Will cherry-pick to branches: ${BRANCHES}"
          fi

  cherry-pick:
    needs: setup
    if: needs.setup.outputs.branches != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Continue with other branches even if one fails
      matrix:
        branch: ${{ fromJson(needs.setup.outputs.branches) }}

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ matrix.branch }}

      - name: Show GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Configure Git
        run: |
          git config --global user.name 'Dax'
          git config --global user.email 'daxmobile@users.noreply.github.com'


      - name: Check if PR is squash-merged
        env:
          GH_TOKEN: ${{ secrets.CPP_GITHUB_RW_TOKEN }}
        run: |
          TARGET_BRANCH="${{ matrix.branch }}"
          MERGE_COMMIT="${{ github.sha }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"

          # Check if the commit has a single parent (indicating squash merge)
          PARENT_COUNT=$(git rev-list --parents -n 1 ${MERGE_COMMIT} | wc -w)
          # Subtract 1 because the output includes the commit itself
          PARENT_COUNT=$((PARENT_COUNT - 1))

          echo "Commit ${MERGE_COMMIT} has ${PARENT_COUNT} parent(s)"

          if [ "${PARENT_COUNT}" != "1" ]; then
            echo "❌ Skipping cherry-pick: Commit is not from a squash merge (has ${PARENT_COUNT} parents)"
            # Only comment once (check if we're on the first branch in the matrix)
            FIRST_BRANCH="${{ fromJson(needs.setup.outputs.branches)[0] }}"
            if [ "${TARGET_BRANCH}" = "${FIRST_BRANCH}" ]; then
              echo "" > skip_comment.md
              echo "ℹ️ **Cherry-pick workflow skipped**" >> skip_comment.md
              echo "This PR was not merged using squash-merge." >> skip_comment.md

              gh pr comment ${PR_NUMBER} --body-file skip_comment.md
            fi
            exit 1
          fi
          echo "✅ Commit is from a squash merge, proceeding with cherry-pick"
      - name: Create branch and cherry-pick
        id: create-branch
        continue-on-error: true  # Allow workflow to continue even if cherry-pick fails
        run: |
          TARGET_BRANCH="${{ matrix.branch }}"
          MERGE_COMMIT="${{ github.sha }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"

          # Create a unique branch name for the cherry-pick
          BRANCH_NAME="dax/pr-${PR_NUMBER}-to-${TARGET_BRANCH}"

          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "target_branch=${TARGET_BRANCH}" >> $GITHUB_OUTPUT

          # Create and checkout the new branch from target branch
          git checkout -b ${BRANCH_NAME}

          # Attempt cherry-pick and capture success/failure
          if git cherry-pick ${MERGE_COMMIT}; then
            echo "Cherry-pick successful for ${TARGET_BRANCH}"
            echo "CHERRY_PICK_SUCCESSFUL=true" >> $GITHUB_OUTPUT

            # Push the branch if cherry-pick was successful
            git push origin ${BRANCH_NAME}
          else
            echo "Cherry-pick failed for ${TARGET_BRANCH} - conflicts detected"
            echo "CHERRY_PICK_SUCCESSFUL=false" >> $GITHUB_OUTPUT

            # Capture conflicted files for the comment
            CONFLICTS=$(git status --short | head -20)
            echo "conflicts<<EOF" >> $GITHUB_OUTPUT
            echo "$CONFLICTS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            # Show the conflicted files for debugging
            echo "Conflicted files:"
            git status --short

            # Abort the cherry-pick to clean up
            git cherry-pick --abort || true

            # Exit with error code to mark the step as failed
            exit 1
          fi

      - name: Comment on PR for cherry-pick failure
        if: steps.create-branch.outputs.CHERRY_PICK_SUCCESSFUL == 'false'
        env:
          GH_TOKEN: ${{ secrets.CPP_GITHUB_RW_TOKEN }}
        run: |
          TARGET_BRANCH="${{ steps.create-branch.outputs.target_branch }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          CONFLICTS="${{ steps.create-branch.outputs.conflicts }}"

          # Create a comment on the original PR about the cherry-pick failure
          echo "🚨 **Cherry-pick to \`${TARGET_BRANCH}\` failed**" > comment.md
          echo "" >> comment.md
          echo "@${PR_AUTHOR} The automatic cherry-pick of this PR to the \`${TARGET_BRANCH}\` branch has failed due to merge conflicts." >> comment.md
          echo "" >> comment.md
          echo "**Conflicted files:**" >> comment.md
          echo "\`\`\`" >> comment.md
          echo "${CONFLICTS}" >> comment.md
          echo "\`\`\`" >> comment.md
          echo "" >> comment.md
          echo "**Next steps:**" >> comment.md
          echo "1. Create a new branch from \`${TARGET_BRANCH}\`" >> comment.md
          echo "2. Cherry-pick commit \`${{ github.sha }}\` manually" >> comment.md
          echo "3. Resolve the conflicts" >> comment.md
          echo "4. Create a pull request targeting \`${TARGET_BRANCH}\`" >> comment.md
          echo "" >> comment.md
          echo "**Manual cherry-pick commands:**" >> comment.md
          echo "\`\`\`bash" >> comment.md
          echo "git fetch origin" >> comment.md
          echo "git checkout -b cherry-pick-pr-${PR_NUMBER}-to-${TARGET_BRANCH} origin/${TARGET_BRANCH}" >> comment.md
          echo "git cherry-pick ${{ github.sha }}" >> comment.md
          echo "# Resolve conflicts, then:" >> comment.md
          echo "git add ." >> comment.md
          echo "git cherry-pick --continue" >> comment.md
          echo "git push origin cherry-pick-pr-${PR_NUMBER}-to-${TARGET_BRANCH}" >> comment.md
          echo "\`\`\`" >> comment.md

          # Post the comment
          gh pr comment ${PR_NUMBER} --body-file comment.md

      - name: Create PR
        if: steps.create-branch.outputs.CHERRY_PICK_SUCCESSFUL == 'true'
        env:
          GH_TOKEN: ${{ secrets.CPP_GITHUB_RW_TOKEN }}
        run: |
          # Use the original PR's title and body
          ORIGINAL_TITLE="${{ github.event.pull_request.title }}"
          ORIGINAL_BODY="${{ github.event.pull_request.body }}"
          TARGET_BRANCH="${{ steps.create-branch.outputs.target_branch }}"

          # Create the pull request with the skip-ci label to prevent CI runs
          gh pr create \
            --base "${TARGET_BRANCH}" \
            --head "${{ steps.create-branch.outputs.branch_name }}" \
            --title "[Cherry-pick to ${TARGET_BRANCH}] ${ORIGINAL_TITLE}" \
            --label "skip-ci" \
            --body "${ORIGINAL_BODY}

          ---
          Cherry-picked from #${{ github.event.pull_request.number }}"
